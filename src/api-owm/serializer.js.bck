//function serilizesomething
//function serilizeanotherthing
//lol lol lol

/* 
for each city in city search response (array of objects) I need:
key
EnglishName
LocalizedName
country.LocalizedName
country.EnglishName */

export function serializeCities(res) {
  console.log(res);
  return (
    res.data.map(elem => ({
      /*  key: elem.key, */
      lat: elem.lat,
      lon: elem.lon,
      englishName: elem.name,
      /* localizedName: elem.LocalizedName, */
      country: {
        englishName: elem.country,
        /*  localizedName: elem.country.LocalizedName, */
      }
    }))
  )
}


/* for fiveDays forecast response (object) I need:
DailyForecast (array of 5 objects)
  Date
  Temperature.Minimum {Value, Unit}
  same for Maximum
  Day {Icon, IconPhrase, PrecipitationType, PrecipitationIntensity}
  Same for Night

  Sources
  Link
*/


/* make animation to move periodically and show day/night info */

export function serializefiveDays(data) {
  const arr = [];
  const unixTime = new Date(0);

  data.list.map(elem => {
    const dayDate = elem.dt_txt.split(" ")[0];
    const lastArrIndex = arr.length - 1;

    if (arr[lastArrIndex]?.date !== dayDate) { //create new entry
      arr.push({ date: dayDate, temp_avg: 0, list: [] })
      return;
    }

    //else append to it
    unixTime.setUTCSeconds(elem.dt);
    let rain = elem?.rain ? elem.rain["3h"] : 0;
    const curListLeng = arr[lastArrIndex].list.length;
    arr[lastArrIndex].temp_avg = (
      ((arr[lastArrIndex].temp_avg * curListLeng)
        + elem.main.temp) / (curListLeng + 1)).toFixed(2);

    arr[lastArrIndex].list.push({
      hour: unixTime.getHours(),
      minute: unixTime.getMinutes(),
      temperature: elem.main.temp,
      wind: {
        speed: elem.wind.speed,
        direction: elem.wind.deg,
      },
      humidity: elem.main.humidity,
      rain: rain,
    })
  })
  return arr;
}


export function serializeForecast12Hours(data) {
  return (data.map(data => {
    const unixTime = new Date(0);
    unixTime.setUTCSeconds(data.EpochDateTime);
    return ({
      hour: unixTime.getHours(),
      minute: unixTime.getMinutes(),
      temperature: data.Temperature.Value,
      wind: {
        speed: data.Wind.Speed.Value,
        direction: data.Wind.Direction.degrees,
      },
      humidity: data.RelativeHumidity,
      rain: data.Rain.Value,
    })
  }))
}